name: CI on NVIDIA GPU

on:
  issue_comment:
    types: [created]

jobs:
  ci:
    if: >
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/run-nvidia-ci') &&
      github.event.comment.author_association == 'OWNER'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      statuses: write
    env:
      MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
      MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
    steps:
    - name: Fetch PR information
      id: pr_info
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          core.setOutput("pr_number", context.issue.number);
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          core.setOutput("pr_head_sha", pr.head.sha);
          core.setOutput("run_url", `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`);
    - name: Set commit status as pending
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: "${{ steps.pr_info.outputs.pr_head_sha }}",
            state: "pending",
            target_url: "${{ steps.pr_info.outputs.run_url }}",
            description: "Pending...",
            context: "CI on NVIDIA GPU (ci-nvidia)",
          });
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: refs/pull/${{ github.event.issue.number }}/merge
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install modal
      run: pip3 install modal
    - name: Run tests on NVIDIA GPU
      run: modal run -m ci.nvidia
    - name: Report commit status
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const state = "${{ job.status }}";
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: "${{ steps.pr_info.outputs.pr_head_sha }}",
            state: state,
            target_url: "${{ steps.pr_info.outputs.run_url }}",
            description: state === "success" ? "Tests passed successfully!" : "Tests failed.",
            context: "CI on NVIDIA GPU (ci-nvidia)",
          });
